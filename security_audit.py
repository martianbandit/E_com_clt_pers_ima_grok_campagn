#!/usr/bin/env python3
"""
Script d'audit de s√©curit√© automatis√© pour NinjaLead
Analyse les vuln√©rabilit√©s et g√©n√®re un rapport complet
"""

import os
import subprocess
import json
import sys
from datetime import datetime

def run_bandit_scan():
    """Analyse de s√©curit√© du code avec Bandit"""
    print("üîç Analyse de s√©curit√© du code Python...")
    
    try:
        result = subprocess.run([
            'bandit', '-r', '.', '-f', 'json', '-o', 'security_report.json'
        ], capture_output=True, text=True)
        
        if os.path.exists('security_report.json'):
            with open('security_report.json', 'r') as f:
                report = json.load(f)
                
            print(f"‚úÖ Scan Bandit termin√©:")
            print(f"   - Fichiers analys√©s: {len(report.get('results', []))}")
            print(f"   - Probl√®mes d√©tect√©s: {len([r for r in report.get('results', []) if r.get('issue_severity') in ['HIGH', 'MEDIUM']])}")
            
            return report
        else:
            print("‚ùå Erreur lors de la g√©n√©ration du rapport Bandit")
            return None
            
    except Exception as e:
        print(f"‚ùå Erreur Bandit: {e}")
        return None

def run_safety_check():
    """V√©rification des vuln√©rabilit√©s des d√©pendances"""
    print("üì¶ V√©rification des vuln√©rabilit√©s des d√©pendances...")
    
    try:
        result = subprocess.run([
            'safety', 'check', '--json', '--output', 'safety_report.json'
        ], capture_output=True, text=True)
        
        if os.path.exists('safety_report.json'):
            with open('safety_report.json', 'r') as f:
                report = json.load(f)
                
            print(f"‚úÖ Scan Safety termin√©:")
            print(f"   - Vuln√©rabilit√©s trouv√©es: {len(report)}")
            
            return report
        else:
            print("‚úÖ Aucune vuln√©rabilit√© d√©tect√©e dans les d√©pendances")
            return []
            
    except Exception as e:
        print(f"‚ùå Erreur Safety: {e}")
        return None

def check_environment_security():
    """V√©rification de la s√©curit√© de l'environnement"""
    print("üîß V√©rification de la configuration de s√©curit√©...")
    
    security_issues = []
    
    # V√©rifier les variables d'environnement sensibles
    sensitive_vars = ['DATABASE_URL', 'SESSION_SECRET', 'SENTRY_DSN']
    for var in sensitive_vars:
        if not os.environ.get(var):
            security_issues.append(f"Variable d'environnement manquante: {var}")
    
    # V√©rifier les permissions des fichiers sensibles
    sensitive_files = ['app.py', 'models.py', '.env']
    for file in sensitive_files:
        if os.path.exists(file):
            stat = os.stat(file)
            if stat.st_mode & 0o077:  # V√©rifier si le fichier est lisible par d'autres
                security_issues.append(f"Permissions trop ouvertes sur: {file}")
    
    if security_issues:
        print("‚ö†Ô∏è  Probl√®mes de s√©curit√© d√©tect√©s:")
        for issue in security_issues:
            print(f"   - {issue}")
    else:
        print("‚úÖ Configuration de l'environnement s√©curis√©e")
    
    return security_issues

def check_flask_security():
    """V√©rification de la configuration Flask"""
    print("üõ°Ô∏è  V√©rification de la s√©curit√© Flask...")
    
    security_recommendations = []
    
    # Lire le fichier app.py pour v√©rifier la configuration
    try:
        with open('app.py', 'r') as f:
            app_content = f.read()
            
        # V√©rifications de s√©curit√© Flask
        checks = [
            ('SESSION_COOKIE_SECURE', 'Cookies de session non s√©curis√©s'),
            ('SESSION_COOKIE_HTTPONLY', 'Cookies accessibles via JavaScript'),
            ('WTF_CSRF_ENABLED', 'Protection CSRF d√©sactiv√©e'),
            ('X-Content-Type-Options', 'En-t√™tes de s√©curit√© manquants')
        ]
        
        for check, message in checks:
            if check not in app_content:
                security_recommendations.append(message)
        
        if security_recommendations:
            print("‚ö†Ô∏è  Recommandations de s√©curit√© Flask:")
            for rec in security_recommendations:
                print(f"   - {rec}")
        else:
            print("‚úÖ Configuration Flask s√©curis√©e")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification Flask: {e}")
        security_recommendations.append("Impossible de v√©rifier la configuration Flask")
    
    return security_recommendations

def generate_security_report():
    """G√©n√®re un rapport de s√©curit√© complet"""
    print("üìã G√©n√©ration du rapport de s√©curit√© complet...")
    
    report = {
        'timestamp': datetime.now().isoformat(),
        'scan_results': {
            'bandit': run_bandit_scan(),
            'safety': run_safety_check(),
            'environment': check_environment_security(),
            'flask_config': check_flask_security()
        }
    }
    
    # Calcul du score de s√©curit√©
    total_issues = 0
    if report['scan_results']['bandit']:
        total_issues += len(report['scan_results']['bandit'].get('results', []))
    if report['scan_results']['safety']:
        total_issues += len(report['scan_results']['safety'])
    total_issues += len(report['scan_results']['environment'])
    total_issues += len(report['scan_results']['flask_config'])
    
    if total_issues == 0:
        security_score = 100
        status = "EXCELLENT"
    elif total_issues <= 3:
        security_score = 80
        status = "BIEN"
    elif total_issues <= 6:
        security_score = 60
        status = "MOYEN"
    else:
        security_score = 40
        status = "CRITIQUE"
    
    report['security_score'] = security_score
    report['status'] = status
    report['total_issues'] = total_issues
    
    # Sauvegarder le rapport
    with open('security_audit_report.json', 'w') as f:
        json.dump(report, f, indent=2)
    
    print(f"\nüéØ RAPPORT DE S√âCURIT√â FINAL:")
    print(f"   Score de s√©curit√©: {security_score}/100 ({status})")
    print(f"   Probl√®mes d√©tect√©s: {total_issues}")
    print(f"   Rapport sauvegard√©: security_audit_report.json")
    
    return report

if __name__ == "__main__":
    print("üöÄ D√©marrage de l'audit de s√©curit√© NinjaLead")
    print("=" * 50)
    
    try:
        report = generate_security_report()
        
        # Code de sortie bas√© sur le score de s√©curit√©
        if report['security_score'] >= 80:
            sys.exit(0)  # Succ√®s
        elif report['security_score'] >= 60:
            sys.exit(1)  # Avertissement
        else:
            sys.exit(2)  # Critique
            
    except Exception as e:
        print(f"‚ùå Erreur critique lors de l'audit: {e}")
        sys.exit(3)