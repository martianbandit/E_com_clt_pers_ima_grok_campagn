name: NinjaLead.ai CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Phase 1: Tests et analyse de qualit√©
  test:
    name: Tests et Qualit√© du Code
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ninjalead_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
    
    - name: Configuration Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Installation des d√©pendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-flask bandit safety black flake8
    
    - name: Tests de formatage avec Black
      run: black --check --diff .
    
    - name: Tests de style avec Flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Analyse de s√©curit√© avec Bandit
      run: bandit -r . -f json -o bandit-report.json || true
    
    - name: V√©rification des vuln√©rabilit√©s avec Safety
      run: safety check --json --output safety-report.json || true
    
    - name: Tests unitaires avec couverture
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ninjalead_test
        SESSION_SECRET: test-secret-key
        TESTING: true
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Upload des rapports de couverture
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # Phase 2: Analyse de s√©curit√© avanc√©e
  security:
    name: Scan de S√©curit√©
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
    
    - name: Scan des secrets avec TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
    
    - name: Analyse des d√©pendances
      uses: github/dependency-review-action@v3
      if: github.event_name == 'pull_request'

  # Phase 3: Build et validation
  build:
    name: Build et Validation
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
    
    - name: Configuration Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Build de l'application
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -c "from app import app; print('Build successful')"
    
    - name: Tests d'int√©gration
      env:
        DATABASE_URL: sqlite:///test.db
        SESSION_SECRET: test-secret-key
        TESTING: true
      run: |
        python -c "
        from app import app, db
        with app.app_context():
            db.create_all()
            print('Database schema created successfully')
        "
    
    - name: Validation des endpoints critiques
      env:
        DATABASE_URL: sqlite:///test.db
        SESSION_SECRET: test-secret-key
      run: |
        python -c "
        from app import app
        with app.test_client() as client:
            # Test health check
            response = client.get('/health')
            assert response.status_code == 200, f'Health check failed: {response.status_code}'
            
            # Test main page
            response = client.get('/')
            assert response.status_code == 200, f'Main page failed: {response.status_code}'
            
            print('All critical endpoints validated successfully')
        "

  # Phase 4: D√©ploiement (uniquement sur main)
  deploy:
    name: D√©ploiement Production
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
    
    - name: Notification de d√©ploiement (d√©but)
      run: |
        echo "üöÄ D√©but du d√©ploiement en production..."
        echo "Commit: ${{ github.sha }}"
        echo "Auteur: ${{ github.actor }}"
    
    # Ici vous pouvez ajouter vos √©tapes de d√©ploiement sp√©cifiques
    # selon votre plateforme (Heroku, AWS, GCP, etc.)
    
    - name: Pr√©paration des artifacts
      run: |
        # Cr√©er un package de d√©ploiement
        tar -czf ninjalead-${{ github.sha }}.tar.gz \
          --exclude='.git' \
          --exclude='tests' \
          --exclude='*.pyc' \
          --exclude='__pycache__' \
          .
    
    - name: Tests post-d√©ploiement
      run: |
        echo "Ex√©cution des tests post-d√©ploiement..."
        # Ici vous pouvez ajouter des tests de smoke pour v√©rifier le d√©ploiement
    
    - name: Notification de d√©ploiement (succ√®s)
      run: |
        echo "‚úÖ D√©ploiement termin√© avec succ√®s!"
        echo "Version d√©ploy√©e: ${{ github.sha }}"

  # Phase 5: Monitoring et alertes
  monitoring:
    name: Configuration Monitoring
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: V√©rification de la sant√© de l'application
      run: |
        echo "Configuration des alertes de monitoring..."
        # Ici vous pouvez configurer des alertes Sentry, DataDog, etc.
    
    - name: Tests de charge l√©gers
      run: |
        echo "Ex√©cution des tests de charge..."
        # Tests basiques pour v√©rifier la r√©activit√©

# Configuration des notifications
notifications:
  webhooks:
    # Webhook pour Slack/Discord/Teams (√† configurer)
    - url: ${{ secrets.WEBHOOK_URL }}
      if: always()